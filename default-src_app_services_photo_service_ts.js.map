{"version":3,"file":"default-src_app_services_photo_service_ts.js","mappings":"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","sources":["./src/app/services/photo.service.ts","./node_modules/@capacitor/camera/dist/esm/definitions.js","./node_modules/@capacitor/camera/dist/esm/index.js"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {Camera, CameraResultType, CameraSource, Photo} from '@capacitor/camera';\r\nimport {MainService} from './main.service';\r\nimport {Constant} from '../shared/constants/constant.class';\r\nimport {Storage} from '@ionic/storage';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PhotoService {\r\n  public photos = [];\r\n\r\n  constructor(private mainService: MainService, private storage: Storage) {\r\n  }\r\n\r\n  public async addNewToGallery() {\r\n    // Take a photo\r\n    // Take a photo\r\n    const capturedPhoto = await Camera.getPhoto({\r\n      resultType: CameraResultType.Uri, // file-based data; provides best performance\r\n      source: CameraSource.Camera, // automatically take a new photo with the camera\r\n      quality: 100 // highest quality (0 to 100)\r\n    });\r\n\r\n    // Save the picture and add it to photo collection\r\n    const savedImageFile = await this.savePicture(capturedPhoto);\r\n    // @ts-ignore\r\n    this.photos.unshift(savedImageFile);\r\n  }\r\n\r\n  public async addNewToGalleryAsyncUpload(schoolId) {\r\n    // Take a photo\r\n    // Take a photo\r\n    const capturedPhoto = await Camera.getPhoto({\r\n      resultType: CameraResultType.Uri, // file-based data; provides best performance\r\n      source: CameraSource.Camera, // automatically take a new photo with the camera\r\n      quality: 100 // highest quality (0 to 100)\r\n    });\r\n\r\n    // Save the picture and add it to photo collection\r\n    const savedImageFile = await this.savePicture(capturedPhoto);\r\n    const blob = await this.toBlod(capturedPhoto);\r\n    const formData = new FormData();\r\n    formData.append('files', blob as any);\r\n    /*this.mainService.uploadArticleImage(formData, schoolId).subscribe(res => {\r\n      savedImageFile.webUrl = res.jsonData.source;\r\n      savedImageFile.webFileName = res.jsonData.filename;\r\n    }, error => {\r\n    });*/\r\n    // @ts-ignore\r\n    this.photos.unshift(savedImageFile);\r\n  }\r\n\r\n  public async choosePhotoFromGallery() {\r\n    console.log('choosePhotoFromGallery');\r\n    // Take a photo\r\n    // Take a photo\r\n    const capturedPhoto = await Camera.getPhoto({\r\n      resultType: CameraResultType.Uri, // file-based data; provides best performance\r\n      source: CameraSource.Photos, // automatically take a new photo with the camera\r\n      quality: 100 // highest quality (0 to 100)\r\n    });\r\n    // Save the picture and add it to photo collection\r\n    const savedImageFile = await this.savePicture(capturedPhoto);\r\n    // @ts-ignore\r\n    this.photos.unshift(savedImageFile);\r\n  }\r\n\r\n  public async chooseAvatar(userInfo) {\r\n    // console.log(userInfo);\r\n    // Take a photo\r\n    const capturedPhoto = await Camera.getPhoto({\r\n      resultType: CameraResultType.Uri, // file-based data; provides best performance\r\n      source: CameraSource.Photos, // automatically take a new photo with the camera\r\n      quality: 100 // highest quality (0 to 100)\r\n    });\r\n    // Save the picture and add it to photo collection\r\n    const savedImageFile = await this.savePictureCrop(capturedPhoto);\r\n\r\n    //const blob = await this.toBlod(capturedPhoto);\r\n    const base64Response = await fetch(savedImageFile.data);\r\n    const blob = await base64Response.blob();\r\n\r\n    const formData = new FormData();\r\n    //savedImageFile.data.replace('data:image/png;base64,', '')\r\n    formData.append('files', blob as any);\r\n\r\n    //this.student.schoolId, this.student.userId\r\n    if (userInfo.userType === 12) {\r\n      /*this.mainService.uploadStudentAvatar(formData, userInfo.schoolId, userInfo.id).subscribe(res => {\r\n        savedImageFile.webUrl = res.jsonData.source;\r\n        userInfo.avatar = res.jsonData.source;\r\n        this.storage.set(Constant.STORAGE_USERINFO, userInfo).then((res3) => {\r\n        });\r\n      }, error => {\r\n      });*/\r\n    } else {\r\n      /*this.mainService.uploadAvatar(formData, userInfo.schoolId, userInfo.userId).subscribe(res => {\r\n        savedImageFile.webUrl = res.jsonData.source;\r\n        userInfo.avatar = res.jsonData.source;\r\n        this.storage.set(Constant.STORAGE_USERINFO, userInfo).then((res3) => {\r\n        });\r\n      }, error => {\r\n      });*/\r\n    }\r\n\r\n\r\n    // @ts-ignore\r\n    return savedImageFile;\r\n  }\r\n\r\n  private compressImage(src, newX, newY) {\r\n    return new Promise((res, rej) => {\r\n      const img = new Image();\r\n      img.src = src;\r\n\r\n      img.onload = () => {\r\n        console.log(img.width, img.height);\r\n        if (img.width < img.height) {\r\n          newY = newX * img.height / img.width;\r\n        } else {\r\n          newX = newY * img.width / img.height;\r\n        }\r\n        const elem = document.createElement('canvas');\r\n        elem.width = newX;\r\n        elem.height = newY;\r\n        const ctx = elem.getContext('2d');\r\n        ctx.drawImage(img, 0, 0, newX, newY);\r\n        console.log(newX, newY);\r\n        const data = ctx.canvas.toDataURL();\r\n        res(data);\r\n      };\r\n      img.onerror = error => rej(error);\r\n    });\r\n  }\r\n\r\n  private cropImage(src, newX, newY) {\r\n    const aspectRatio = 1;\r\n    return new Promise((res, rej) => {\r\n      const inputImage = new Image();\r\n      inputImage.src = src;\r\n\r\n      //console.log(inputImage);\r\n      inputImage.onload = () => {\r\n        const inputWidth = inputImage.naturalWidth;\r\n        const inputHeight = inputImage.naturalHeight;\r\n\r\n        // get the aspect ratio of the input image\r\n        const inputImageAspectRatio = inputWidth / inputHeight;\r\n\r\n        // if it's bigger than our target aspect ratio\r\n        let outputWidth = inputWidth;\r\n        let outputHeight = inputHeight;\r\n        if (inputImageAspectRatio > aspectRatio) {\r\n          outputWidth = inputHeight * aspectRatio;\r\n        } else if (inputImageAspectRatio < aspectRatio) {\r\n          outputHeight = inputWidth / aspectRatio;\r\n        }\r\n        console.log(outputWidth, outputHeight);\r\n\r\n        // calculate the position to draw the image at\r\n        const outputX = (outputWidth - inputWidth) * 0.5;\r\n        const outputY = (outputHeight - inputHeight) * 0.5;\r\n\r\n        // create a canvas that will present the output image\r\n        const outputImage = document.createElement('canvas');\r\n\r\n        // set it to the same size as the image\r\n        outputImage.width = outputWidth;\r\n        outputImage.height = outputHeight;\r\n\r\n        // draw our image at position 0, 0 on the canvas\r\n        const ctx = outputImage.getContext('2d');\r\n        ctx.drawImage(inputImage, outputX, outputY);\r\n        const data1 = ctx.canvas.toDataURL();\r\n        // console.log(data1);\r\n        const inputImage2 = new Image();\r\n        inputImage2.src = data1;\r\n        inputImage2.onload = () => {\r\n          const elem = document.createElement('canvas');\r\n          elem.width = newX;\r\n          elem.height = newY;\r\n          const ctx2 = elem.getContext('2d');\r\n          ctx2.drawImage(inputImage2, 0, 0, newX, newY);\r\n          const data2 = ctx2.canvas.toDataURL();\r\n          res(data2);\r\n        };\r\n      };\r\n      inputImage.onerror = error => rej(error);\r\n    });\r\n  }\r\n\r\n  private async savePicture(photo: Photo) {\r\n    // Convert photo to base64 format, required by Filesystem API to save\r\n    let base64Data: any = await this.readAsBase64(photo);\r\n\r\n    //base64Data = this.compressImage(base64Data, 200, 200);\r\n    await this.compressImage(base64Data, 800, 800).then(compressed => {\r\n      base64Data = compressed;\r\n    })\r\n    console.log(base64Data);\r\n    const fileName = new Date().getTime() + '.jpg';\r\n    return {\r\n      filepath: fileName,\r\n      data: base64Data,\r\n      webviewPath: photo.webPath,\r\n      webUrl: '',\r\n      webFileName: ''\r\n    };\r\n  }\r\n\r\n  private async savePictureCrop(photo: Photo) {\r\n    // Convert photo to base64 format, required by Filesystem API to save\r\n    let base64Data: any = await this.readAsBase64(photo);\r\n    //base64Data = this.compressImage(base64Data, 200, 200);\r\n    await this.cropImage(base64Data, 450, 450).then(compressed => {\r\n      base64Data = compressed;\r\n    })\r\n    const fileName = new Date().getTime() + '.jpeg';\r\n    return {\r\n      filepath: fileName,\r\n      data: base64Data,\r\n      webviewPath: photo.webPath,\r\n      webUrl: '',\r\n      webFileName: ''\r\n    };\r\n  }\r\n\r\n  private async readAsBase64(photo: Photo) {\r\n    // Fetch the photo, read as a blob, then convert to base64 format\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    const response = await fetch(photo.webPath!);\r\n    const blob = await response.blob();\r\n    return await this.convertBlobToBase64(blob) as string;\r\n  }\r\n\r\n  private async toBlod(photo: Photo) {\r\n    // Fetch the photo, read as a blob, then convert to base64 format\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    const response = await fetch(photo.webPath!);\r\n    return await response.blob();\r\n  }\r\n\r\n  private convertBlobToBase64 = (blob: Blob) => new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onerror = reject;\r\n    reader.onload = () => {\r\n      resolve(reader.result);\r\n    };\r\n    reader.readAsDataURL(blob);\r\n  });\r\n\r\n  // eslint-disable-next-line @typescript-eslint/member-ordering\r\n  public async choosePhotoFromGalleryAnUpload(schoolId) {\r\n    // Take a photo\r\n    // Take a photo\r\n    const capturedPhoto = await Camera.getPhoto({\r\n      resultType: CameraResultType.Uri, // file-based data; provides best performance\r\n      source: CameraSource.Photos, // automatically take a new photo with the camera\r\n      quality: 100 // highest quality (0 to 100)\r\n    });\r\n    // Save the picture and add it to photo collection\r\n    const savedImageFile = await this.savePicture(capturedPhoto);\r\n    const blob = await this.toBlod(capturedPhoto);\r\n    const formData = new FormData();\r\n    formData.append('files', blob as any);\r\n    /*this.mainService.uploadArticleImage(formData, schoolId).subscribe(res => {\r\n      savedImageFile.webUrl = res.jsonData.source;\r\n      savedImageFile.webFileName = res.jsonData.filename;\r\n    }, error => {\r\n    });*/\r\n    // @ts-ignore\r\n    this.photos.unshift(savedImageFile);\r\n  }\r\n}\r\n\r\nexport interface UserPhoto {\r\n  filepath: string;\r\n  webviewPath: string;\r\n}\r\n","export var CameraSource;\n(function (CameraSource) {\n    /**\n     * Prompts the user to select either the photo album or take a photo.\n     */\n    CameraSource[\"Prompt\"] = \"PROMPT\";\n    /**\n     * Take a new photo using the camera.\n     */\n    CameraSource[\"Camera\"] = \"CAMERA\";\n    /**\n     * Pick an existing photo from the gallery or photo album.\n     */\n    CameraSource[\"Photos\"] = \"PHOTOS\";\n})(CameraSource || (CameraSource = {}));\nexport var CameraDirection;\n(function (CameraDirection) {\n    CameraDirection[\"Rear\"] = \"REAR\";\n    CameraDirection[\"Front\"] = \"FRONT\";\n})(CameraDirection || (CameraDirection = {}));\nexport var CameraResultType;\n(function (CameraResultType) {\n    CameraResultType[\"Uri\"] = \"uri\";\n    CameraResultType[\"Base64\"] = \"base64\";\n    CameraResultType[\"DataUrl\"] = \"dataUrl\";\n})(CameraResultType || (CameraResultType = {}));\n","import { registerPlugin } from '@capacitor/core';\nconst Camera = registerPlugin('Camera', {\n    web: () => import('./web').then(m => new m.CameraWeb()),\n});\nexport * from './definitions';\nexport { Camera };\n"],"names":["Injectable","Camera","CameraResultType","CameraSource","MainService","Storage","PhotoService","constructor","mainService","storage","blob","Promise","resolve","reject","reader","FileReader","onerror","onload","result","readAsDataURL","addNewToGallery","capturedPhoto","getPhoto","resultType","Uri","source","quality","savedImageFile","savePicture","photos","unshift","addNewToGalleryAsyncUpload","schoolId","toBlod","formData","FormData","append","choosePhotoFromGallery","console","log","Photos","chooseAvatar","userInfo","savePictureCrop","base64Response","fetch","data","userType","compressImage","src","newX","newY","res","rej","img","Image","width","height","elem","document","createElement","ctx","getContext","drawImage","canvas","toDataURL","error","cropImage","aspectRatio","inputImage","inputWidth","naturalWidth","inputHeight","naturalHeight","inputImageAspectRatio","outputWidth","outputHeight","outputX","outputY","outputImage","data1","inputImage2","ctx2","data2","photo","base64Data","readAsBase64","then","compressed","fileName","Date","getTime","filepath","webviewPath","webPath","webUrl","webFileName","response","convertBlobToBase64","choosePhotoFromGalleryAnUpload","providedIn","CameraDirection","registerPlugin","web","m","CameraWeb"],"sourceRoot":"webpack:///","x_google_ignoreList":[1,2]}